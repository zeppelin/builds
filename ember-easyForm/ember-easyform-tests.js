// ==========================================================================
// Project:   Ember EasyForm
// Copyright: Copyright 2013 DockYard, LLC. and contributors.
// License:   Licensed under MIT license (see license.js)
// ==========================================================================


 // Version: 1.0.0.beta.1

var JSHINTRC = {
    "predef": [
        "console",
        "Ember",
        "DS",
        "Handlebars",
        "Metamorph",
        "ember_assert",
        "ember_warn",
        "ember_deprecate",
        "ember_deprecateFunc",
        "require",
        "equal",
        "asyncTest",
        "test",
        "raises",
        "deepEqual",
        "start",
        "stop",
        "ok",
        "strictEqual",
        "module",
        "expect",
        "minispade",
        "async",
        "invokeAsync"
    ],

    "node" : false,
    "es5" : true,
    "browser" : true,

    "boss" : true,
    "curly": false,
    "debug": false,
    "devel": false,
    "eqeqeq": true,
    "evil": true,
    "forin": false,
    "immed": false,
    "laxbreak": false,
    "newcap": true,
    "noarg": true,
    "noempty": false,
    "nonew": false,
    "nomen": false,
    "onevar": false,
    "plusplus": false,
    "regexp": false,
    "undef": true,
    "sub": true,
    "strict": false,
    "white": false
}
;

minispade.register('ember-easyForm/~tests/config_test', "(function() {module('EasyForm config methods');\n\ntest('contains a default wrapper', function() {\n  var wrapper = Ember.EasyForm.Config.getWrapper('default');\n  ok(wrapper, 'The default wrapper could not be found');\n  equal(wrapper.errorClass, 'error');\n});\n\ntest('register custom wrappers', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {errorClass: 'my-error'});\n  var wrapper = Ember.EasyForm.Config.getWrapper('my_wrapper');\n  ok(wrapper, 'The custom wrapper could not be found');\n  equal(wrapper.errorClass, 'my-error');\n});\n\ntest('merge the default wrapper with the custom one', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {errorClass: 'my-error'});\n  var wrapper = Ember.EasyForm.Config.getWrapper('my_wrapper');\n  equal(wrapper.errorClass, 'my-error');\n  equal(wrapper.hintClass, 'hint');\n});\n\ntest('register custom input types', function() {\n  Ember.EasyForm.Config.registerInputType('my_input', Ember.EasyForm.Select);\n  Ember.EasyForm.Config.registerInputType('another_input', Ember.EasyForm.Label);\n\n  var inputType = Ember.EasyForm.Config.getInputType('my_input');\n  equal(inputType, Ember.EasyForm.Select);\n  inputType = Ember.EasyForm.Config.getInputType('another_input');\n  equal(inputType, Ember.EasyForm.Label);\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/config_test");minispade.register('ember-easyForm/~tests/helpers/error-field_test', "(function() {var model, Model, view, container, controller, valid, ErrorsObject;\nvar templateFor = function(template) {\n  return Ember.Handlebars.compile(template);\n};\nvar original_lookup = Ember.lookup, lookup;\nModel = Ember.Object.extend();\nErrorsObject = Ember.Object.extend({\n  unknownProperty: function(property) {\n    this.set(property, Ember.makeArray());\n    return this.get(property);\n  }\n});\n\nmodule('error-field helpers', {\n  setup: function() {\n    container = new Ember.Container();\n    container.optionsForType('template', { instantiate: false });\n    container.resolver = function(fullName) {\n      var name = fullName.split(':')[1];\n      return Ember.TEMPLATES[name];\n    };\n    model = Model.create({\n      firstName: 'Brian',\n      lastName: 'Cardarella',\n      errors: ErrorsObject.create()\n    });\n    controller = Ember.ObjectController.create();\n    controller.set('content', model);\n  },\n  teardown: function() {\n    Ember.run(function() {\n      view.destroy();\n      view = null;\n    });\n    Ember.lookup = original_lookup;\n  }\n});\n\nvar append = function(view) {\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n};\n\ntest('error helper should bind to first error message in array', function() {\n  view = Ember.View.create({\n    template: templateFor('{{error-field firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('span.error').text(), '');\n  Ember.run(function() {\n    model.get('errors.firstName').pushObject(\"can't be blank\");\n  });\n  equal(view.$().find('span.error').text(), \"can't be blank\");\n  Ember.run(function() {\n    model.get('errors.firstName').unshiftObject('is invalid');\n  });\n  equal(view.$().find('span.error').text(), 'is invalid');\n  Ember.run(function() {\n    model.get('errors.firstName').clear();\n  });\n  equal(view.$().find('span.error').text(), '');\n});\n\ntest('uses the wrapper config', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {errorClass: 'my-error'});\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller wrapper=\"my_wrapper\"}}{{error-field firstName}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    model.errors.set('firstName', [\"can't be blank\"]);\n  });\n  ok(view.$().find('span.my-error').get(0), 'errorClass not defined');\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/helpers/error-field_test");minispade.register('ember-easyForm/~tests/helpers/form-for_test', "(function() {var model, Model, view, container, controller, valid;\nvar templateFor = function(template) {\n  return Ember.Handlebars.compile(template);\n};\nvar original_lookup = Ember.lookup, lookup;\nModel = Ember.Object.extend({\n  validate: function() {\n    var promise = new Ember.Deferred();\n    promise.resolve();\n    return promise;\n  }\n});\n\nmodule('the form-for helper', {\n  setup: function() {\n    container = new Ember.Container();\n    container.optionsForType('template', { instantiate: false });\n    container.resolver = function(fullName) {\n      var name = fullName.split(':')[1];\n      return Ember.TEMPLATES[name];\n    };\n    model = Model.create({\n      firstName: 'Brian',\n      lastName: 'Cardarella',\n      errors: Ember.Object.create()\n    });\n    var Controller = Ember.ObjectController.extend({\n      actions: {\n        submit: function() {\n          this.incrementProperty('count');\n        },\n        bigSubmit: function() {\n          this.incrementProperty('count', 2);\n        }\n      }\n    });\n    controller = Controller.create();\n    controller.set('content', model);\n    controller.set('count', 0);\n  },\n  teardown: function() {\n    Ember.run(function() {\n      view.destroy();\n      view = null;\n    });\n    Ember.lookup = original_lookup;\n  }\n});\n\nvar append = function(view) {\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n};\n\ntest('renders a form element', function() {\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller}}{{/form-for}}'),\n    controller: controller\n  });\n  append(view);\n  ok(view.$().find('form').get(0));\n});\n\ntest('uses the defined wrapper', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {formClass: 'my-form-class'});\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller wrapper=\"my_wrapper\"}}{{/form-for}}'),\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('form').attr('class'), 'ember-view my-form-class');\n});\n\ntest('submitting with invalid model does not call submit action on controller', function() {\n  Ember.run(function() {\n    model.set('isValid', false);\n  });\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0].trigger('submit');\n  });\n  equal(controller.get('count'), 0);\n});\n\ntest('submitting with valid model calls submit action on controller', function() {\n  Ember.run(function() {\n    model.set('isValid', true);\n  });\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0].trigger('submit');\n  });\n  equal(controller.get('count'), 1);\n});\n\ntest('submitting with valid controller calls submit action on controller', function() {\n  controller.reopen({\n    validate: function() {\n      var promise = new Ember.Deferred();\n      promise.resolve();\n      return promise;\n    }\n  });\n  Ember.run(function() {\n    controller.set('isValid', true);\n  });\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0].trigger('submit');\n  });\n  equal(controller.get('count'), 1);\n});\n\ntest('can override the action called by submit on the controller', function() {\n  Ember.run(function() {\n    model.set('isValid', true);\n  });\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller action=\"bigSubmit\"}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0].trigger('submit');\n  });\n  equal(controller.get('count'), 2);\n});\n\ntest('submitting with model that does not have validate method', function() {\n  var model = Ember.Object.create();\n  Ember.run(function() {\n    controller.set('content', model);\n  });\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0].trigger('submit');\n  });\n  equal(controller.get('count'), 1);\n});\n\ntest('submitting with ember-data model without validations can call submit action on controller', function() {\n  Ember.run(function() {\n    model.set('isValid', false);\n    model.validate = undefined;\n  });\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0].trigger('submit');\n  });\n  equal(controller.get('count'), 1);\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/helpers/form-for_test");minispade.register('ember-easyForm/~tests/helpers/hint-field_test', "(function() {var model, Model, view, container, controller, valid;\nvar templateFor = function(template) {\n  return Ember.Handlebars.compile(template);\n};\nvar original_lookup = Ember.lookup, lookup;\nModel = Ember.Object.extend();\n\nmodule('hint-field helpers', {\n  setup: function() {\n    container = new Ember.Container();\n    container.optionsForType('template', { instantiate: false });\n    container.resolver = function(fullName) {\n      var name = fullName.split(':')[1];\n      return Ember.TEMPLATES[name];\n    };\n    model = Model.create({\n      firstName: 'Brian',\n    });\n    controller = Ember.ObjectController.create();\n    controller.set('content', model);\n  },\n  teardown: function() {\n    Ember.run(function() {\n      view.destroy();\n      view = null;\n    });\n    Ember.lookup = original_lookup;\n  }\n});\n\nvar append = function(view) {\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n};\n\ntest('renders a hint field with custom text', function() {\n  view = Ember.View.create({\n    template: templateFor('{{hint-field firstName text=\"Some text\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('span.hint').text(), 'Some text');\n});\n\ntest('does not render a hint field without custom text', function() {\n  view = Ember.View.create({\n    template: templateFor('{{hint-field firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('span.hint').length, 0, 'The hint element should not have been created');\n});\n\n\ntest('uses the wrapper config', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {hintClass: 'my-hint'});\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller wrapper=\"my_wrapper\"}}{{hint-field firstName text=\"Some text\"}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  ok(view.$().find('span.my-hint').get(0), 'hintClass not defined');\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/helpers/hint-field_test");minispade.register('ember-easyForm/~tests/helpers/input-field_test', "(function() {var model, Model, view, container, controller, valid, countries;\nvar templateFor = function(template) {\n  return Ember.Handlebars.compile(template);\n};\nvar original_lookup = Ember.lookup, lookup;\nModel = Ember.Object.extend();\n\nmodule('input-field helpers', {\n  setup: function() {\n    container = new Ember.Container();\n    container.optionsForType('template', { instantiate: false });\n    container.resolver = function(fullName) {\n      var name = fullName.split(':')[1];\n      return Ember.TEMPLATES[name];\n    };\n    countries = [Model.create({ id: 1, name: 'South Aftica' }), Model.create({ id: 2, name: 'United States' })];\n\n    model = Model.create({\n      firstName: 'Brian',\n      lastName: 'Cardarella',\n      country: countries[1]\n    });\n\n    controller = Ember.ObjectController.create();\n    controller.set('content', model);\n    controller.set('optionsForCountry', countries);\n  },\n  teardown: function() {\n    Ember.run(function() {\n      view.destroy();\n      view = null;\n    });\n    Ember.lookup = original_lookup;\n  }\n});\n\nvar append = function(view) {\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n};\n\ntest('render text input and sets value propertly', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'text');\n  equal(view.$().find('input').val(), 'Brian');\n});\n\ntest('allows setting of input attributes', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field secret type=\"hidden\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'hidden');\n});\n\ntest('auto sets input type to password if name includes password', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field passwordConfirmation}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'password');\n});\n\ntest('auto sets input type to password if forced to passwordr', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field token as=\"password\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'password');\n});\n\ntest('auto sets input type to url if name includes url', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field url}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'url');\n});\n\ntest('auto sets input type to url if forced to url', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field website as=\"url\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'url');\n});\n\ntest('auto sets input type to color if name includes color', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field color}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'color');\n});\n\ntest('auto sets input type to color if forced to color', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field hue as=\"color\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'color');\n});\n\ntest('auto sets input type to tel if name includes tel', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field telephone}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'tel');\n});\n\ntest('auto sets input type to tel if forced to tel', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field phoneNumber as=\"tel\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'tel');\n});\n\ntest('auto sets input type to search if name includes search', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field search}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'search');\n});\n\ntest('auto sets input type to search if forced to search', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field query as=\"search\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'search');\n});\n\ntest('auto sets input type to email if name includes email', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field email}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'email');\n});\n\ntest('auto sets input type to email if forced to email', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field receivedAt as=\"email\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'email');\n});\n\ntest('auto sets input type to number if property meta attribute is a number', function() {\n   model.reopen({\n    metaForProperty: function(property) {\n      var obj = { 'type': 'number' };\n      if (property === 'age') {\n        return obj;\n      }\n    }\n  });\n  model.set('age', 30);\n  view = Ember.View.create({\n    template: templateFor('{{input-field age}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'number');\n});\n\ntest('auto sets input type to number if property is a number', function() {\n  model.set('age', 30);\n  view = Ember.View.create({\n    template: templateFor('{{input-field age}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'number');\n});\n\ntest('auto sets input type to date if property meta attribute is a date', function() {\n  model.reopen({\n    metaForProperty: function(property) {\n      var obj = { 'type': 'date' };\n      if (property === 'birthday') {\n        return obj;\n      }\n    }\n  });\n  model.set('birthday', new Date());\n  view = Ember.View.create({\n    template: templateFor('{{input-field birthday}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'date');\n});\n\ntest('auto sets input type to checkbox if forced to checkbox', function() {\n  model.set('alive', true);\n  view = Ember.View.create({\n    template: templateFor('{{input-field alive as=\"checkbox\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'checkbox');\n  equal(view.$().find('input').is(':checked'), true);\n});\n\ntest('auto sets input type to checkbox if property meta attribute is a boolean', function() {\n  model.reopen({\n    metaForProperty: function(property) {\n      var obj = { 'type': 'boolean' };\n      if (property === 'old') {\n        return obj;\n      }\n    }\n  });\n  model.set('old', false);\n  view = Ember.View.create({\n    template: templateFor('{{input-field old}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'checkbox');\n});\n\ntest('auto sets input type to number if property is a number', function() {\n  model.set('age', 30);\n  view = Ember.View.create({\n    template: templateFor('{{input-field age}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'number');\n});\n\ntest('does not fail if a controller content constructor does not respond to proto', function() {\n  controller.set('content', []);\n  view = Ember.View.create({\n    template: templateFor('{{input-field name}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('input').attr('type'), 'text');\n});\n\ntest('renders semantic form elements with text area', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field firstName as=\"text\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('textarea').val(), 'Brian');\n});\n\ntest('uses the custom input type when defined', function() {\n  Ember.EasyForm.Config.registerInputType('my_input', Ember.EasyForm.TextArea);\n  Ember.EasyForm.Config.registerInputType('another_input', Ember.EasyForm.TextField);\n  view = Ember.View.create({\n    template: templateFor('{{input-field firstName as=\"my_input\"}}{{input-field lastName as=\"another_input\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('textarea').val(), 'Brian');\n  equal(view.$().find('input').val(), 'Cardarella');\n});\n\ntest('generates a select input and options', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field country as=\"select\" collection=\"optionsForCountry\"}}'),\n    container: container,\n    controller: controller\n  });\n\n  append(view);\n  equal(view.$().find('select').length, 1);\n  equal(view.$().find('select option').length, 2);\n});\n\ntest('generates a select input and options with prompt', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field country as=\"select\" collection=\"optionsForCountry\" prompt=\"Select Country\"}}'),\n    container: container,\n    controller: controller\n  });\n\n  append(view);\n  equal(view.$().find('select').length, 1);\n  equal(view.$().find('select option').length, 3);\n});\n\ntest('generates a select input with correct selection', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field country as=\"select\" collection=\"optionsForCountry\" selection=\"country\" optionValuePath=\"content.id\" optionLabelPath=\"content.name\"}}'),\n    container: container,\n    controller: controller\n  });\n\n  append(view);\n  ok(view.$().find('select option:selected').html().match(/United States/));\n});\n\ntest('generates a select input with correct selection when no selection is specified', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field country as=\"select\" collection=\"optionsForCountry\" optionValuePath=\"content.id\" optionLabelPath=\"content.name\"}}'),\n    container: container,\n    controller: controller\n  });\n\n  append(view);\n  ok(view.$().find('select option:selected').html().match(/United States/));\n});\n\ntest('generates a select input correct value', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input-field country as=\"select\" collection=\"optionsForCountry\" value=\"country.id\" optionValuePath=\"content.id\" optionLabelPath=\"content.name\"}}'),\n    container: container,\n    controller: controller\n  });\n\n  append(view);\n  ok(view.$().find('select option:selected').html().match(/United States/));\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/helpers/input-field_test");minispade.register('ember-easyForm/~tests/helpers/input_test', "(function() {var model, Model, view, valid, container, controller, ErrorsObject;\nvar templateFor = function(template) {\n  return Ember.Handlebars.compile(template);\n};\nvar originalLookup = Ember.lookup, lookup;\nErrorsObject = Ember.Object.extend({\n  unknownProperty: function(property) {\n    this.set(property, Ember.makeArray());\n    return this.get(property);\n  }\n});\n\nmodule('input helpers', {\n  setup: function() {\n    container = new Ember.Container();\n    container.optionsForType('template', { instantiate: false });\n    container.resolver = function(fullName) {\n      var name = fullName.split(':')[1];\n      return Ember.TEMPLATES[name];\n    };\n    model = Ember.Object.create({\n      firstName: 'Brian',\n      lastName: 'Cardarella'\n    });\n    controller = Ember.ObjectController.create({\n      placeholder: 'A placeholder',\n      label: 'A label',\n      hint: 'A hint',\n      prompt: 'A prompt'\n    });\n    controller.set('content', model);\n  },\n  teardown: function() {\n    Ember.run(function() {\n      view.destroy();\n      view = null;\n    });\n    Ember.lookup = originalLookup;\n  }\n});\n\nvar append = function(view) {\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n};\n\ntest('renders semantic form elements', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('label').text(), 'First name');\n  equal(view.$().find('input').val(), 'Brian');\n  equal(view.$().find('input').attr('type'), 'text');\n});\n\ntest('does not render error tag when context does not have errors object', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  ok(!view.$().find('div.fieldWithErrors').get(0));\n  ok(!view.$().find('span.error').get(0));\n  Ember.run(function() {\n    view._childViews[0].trigger('focusOut');\n  });\n  ok(!view.$().find('div.fieldWithErrors').get(0));\n  ok(!view.$().find('span.error').get(0));\n});\n\ntest('renders error for invalid data', function() {\n  model.reopen({\n    errors: ErrorsObject.create()\n  });\n\n  Ember.run(function() {\n    model.get('errors.firstName').pushObject(\"can't be blank\");\n  });\n\n  view = Ember.View.create({\n    template: templateFor('{{input firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n\n  ok(!view.$().find('div.fieldWithErrors').get(0));\n  ok(!view.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    view._childViews[0].trigger('input');\n  });\n  ok(!view.$().find('div.fieldWithErrors').get(0));\n  ok(!view.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    view._childViews[0].trigger('focusOut');\n  });\n  ok(view.$().find('div.fieldWithErrors').get(0));\n  equal(view.$().find('span.error').text(), \"can't be blank\");\n\n  Ember.run(function() {\n    model.get('errors.firstName').clear();\n  });\n  ok(!view.$().find('div.fieldWithErrors').get(0));\n  ok(!view.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    view._childViews[0].trigger('focusOut');\n  });\n  ok(!view.$().find('div.fieldWithErrors').get(0));\n  ok(!view.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    model.get('errors.firstName').pushObject(\"can't be blank\");\n    view._childViews[0].trigger('input');\n  });\n  ok(!view.$().find('div.fieldWithErrors').get(0));\n  ok(!view.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    view._childViews[0].trigger('focusOut');\n  });\n  ok(view.$().find('div.fieldWithErrors').get(0));\n  equal(view.$().find('span.error').text(), \"can't be blank\");\n});\n\ntest('renders errors properly with dependent keys', function() {\n  var passwordView, confirmationView;\n  model.reopen({\n    errors: ErrorsObject.create(),\n    _dependentValidationKeys: {\n      passwordConfirmation: ['password']\n    }\n  });\n\n  Ember.run(function() {\n    model.get('errors.passwordConfirmation').pushObject(\"does not match password\");\n  });\n\n  view = Ember.View.create({\n    template: templateFor('{{input password}}{{input passwordConfirmation}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  passwordView = view._childViews[0];\n  confirmationView = view._childViews[1];\n\n  ok(!confirmationView.$().hasClass('fieldWithErrors'));\n  ok(!confirmationView.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    passwordView.trigger('input');\n  });\n  ok(!confirmationView.$().hasClass('fieldWithErrors'));\n  ok(!confirmationView.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    passwordView.trigger('focusOut');\n  });\n  ok(!confirmationView.$().hasClass('fieldWithErrors'));\n  ok(!confirmationView.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    confirmationView.trigger('focusOut');\n  });\n  ok(confirmationView.$().hasClass('fieldWithErrors'));\n  ok(confirmationView.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    model.get('errors.passwordConfirmation').clear();\n    confirmationView.trigger('focusOut');\n  });\n  ok(!confirmationView.$().hasClass('fieldWithErrors'));\n  ok(!confirmationView.$().find('span.error').get(0));\n\n  Ember.run(function() {\n    model.get('errors.passwordConfirmation').pushObject(\"does not match password\");\n    passwordView.trigger('input');\n  });\n  ok(confirmationView.$().hasClass('fieldWithErrors'));\n  ok(confirmationView.$().find('span.error').get(0));\n});\n\ntest('allows label text to be set', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input firstName label=\"Your First Name\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('label').text(), 'Your First Name');\n});\n\ntest('allows hint text to be set', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input firstName hint=\"My hint text\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('span.hint').text(), 'My hint text');\n});\n\ntest('does not show hint span when there is no hint', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('span.hint').length, 0);\n});\n\ntest('block form for input', function() {\n  view = Ember.View.create({\n    template: templateFor('{{#input firstName}}{{label-field firstName}}{{input-field firstName}}{{error-field firstName}}{{/input}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('label').text(), 'First name');\n  equal(view.$().find('input').val(), 'Brian');\n  equal(view.$().find('input').attr('type'), 'text');\n});\n\ntest('sets input attributes property', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input receiveAt as=\"email\" placeholder=\"Your email\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  var input = view.$().find('input');\n  equal(input.prop('type'), 'email');\n  equal(input.prop('placeholder'), 'Your email');\n});\n\ntest('binds label to input field', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  var input = view.$().find('input');\n  var label = view.$().find('label');\n  equal(input.prop('id'), label.prop('for'));\n});\n\ntest('uses the wrapper config', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {inputClass: 'my-input', inputElementClass: 'my-input-element', errorClass: 'my-error', fieldErrorClass: 'my-fieldWithErrors'});\n  model.reopen({\n    errors: ErrorsObject.create()\n  });\n\n  Ember.run(function() {\n    model.get('errors.firstName').pushObject(\"can't be blank\");\n  });\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller wrapper=\"my_wrapper\"}}{{input firstName}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0]._childViews[0].trigger('focusOut');\n  });\n  ok(view.$().find('div.my-input').get(0), 'inputClass not defined');\n  ok(view.$().find('input.my-input-element').get(0), 'inputElementClass not defined');\n  ok(view.$().find('div.my-fieldWithErrors').get(0), 'fieldErrorClass not defined');\n  ok(view.$().find('span.my-error').get(0), 'errorClass not defined');\n});\n\ntest('uses the wrapper config on all input types', function() {\n  var template = '{{#form-for controller wrapper=my_wrapper}}' +\n    '{{input firstName}}{{input lastName as=\"text\"}}{{input title as=\"select\"}}{{input alive as=\"checkbox\"}}' +\n    '{{/form-for}}';\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {inputElementClass: 'my-input-element'});\n  view = Ember.View.create({\n    template: templateFor(template),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  ok(view.$().find('input[type=text].my-input-element').get(0), 'inputElementClass not defined on text');\n  ok(view.$().find('input[type=checkbox].my-input-element').get(0), 'inputElementClass not defined on checkbox');\n  ok(view.$().find('select.my-input-element').get(0), 'inputElementClass not defined on select');\n  ok(view.$().find('textarea.my-input-element').get(0), 'inputElementClass not defined on textarea');\n});\n\ntest('wraps controls when defined', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {wrapControls: true, controlsWrapperClass: 'my-wrapper'});\n  model.reopen({\n    errors: ErrorsObject.create()\n  });\n\n  Ember.run(function() {\n    model.get('errors.firstName').pushObject(\"can't be blank\");\n  });\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller wrapper=\"my_wrapper\"}}{{input firstName hint=\"my hint\"}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0]._childViews[0].trigger('focusOut');\n  });\n  var controlsWrapper = view.$().find('div.my-wrapper');\n  ok(controlsWrapper.get(0), 'controls were not wrapped');\n  ok(controlsWrapper.find('input').get(0), 'the input field should be inside the wrapper');\n  ok(controlsWrapper.find('span.error').get(0), 'the error should be inside the wrapper');\n  ok(controlsWrapper.find('span.hint').get(0), 'the hint should be inside the wrapper');\n});\n\ntest('does not wrap controls when not defined', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {wrapControls: false, controlsWrapperClass: 'my-wrapper'});\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller wrapper=\"my_wrapper\"}}{{input firstName hint=\"my hint\"}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  Ember.run(function() {\n    view._childViews[0]._childViews[0].trigger('focusOut');\n  });\n  equal(view.$().find('div.my-wrapper').length, 0, 'should not create the controls wrapper');\n});\n\ntest('sets input attributes property as bindings', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input firstName placeholderBinding=\"placeholder\" labelBinding=\"label\" hintBinding=\"hint\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n\n  equal(view.$().find('input').prop('placeholder'), controller.get('placeholder'));\n  equal(view.$().find('label').text(), controller.get('label'));\n  equal(view.$().find('.hint').text(), controller.get('hint'));\n\n  Ember.run(function() {\n    controller.setProperties({\n      placeholder: 'Write your first name',\n      label: 'First name (not a last name)',\n      hint: 'Usually different than your last name'\n    });\n  });\n\n  equal(view.$().find('input').prop('placeholder'), controller.get('placeholder'));\n  equal(view.$().find('label').text(), controller.get('label'));\n  equal(view.$().find('.hint').text(), controller.get('hint'));\n});\n\ntest('sets select prompt property as bindings', function() {\n  view = Ember.View.create({\n    template: templateFor('{{input firstName as=\"select\" labelBinding=\"label\" hintBinding=\"hint\" promptBinding=\"prompt\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n\n  equal(view.$().find('option').text(), controller.get('prompt'));\n  equal(view.$().find('label').text(), controller.get('label'));\n  equal(view.$().find('.hint').text(), controller.get('hint'));\n\n  Ember.run(function() {\n    controller.setProperties({\n      prompt: 'Select an option',\n      label: 'First name (not a last name)',\n      hint: 'Usually different than your last name'\n    });\n  });\n\n  equal(view.$().find('option').text(), controller.get('prompt'));\n  equal(view.$().find('label').text(), controller.get('label'));\n  equal(view.$().find('.hint').text(), controller.get('hint'));\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/helpers/input_test");minispade.register('ember-easyForm/~tests/helpers/label-field_test', "(function() {var model, Model, view, container, controller, valid;\nvar templateFor = function(template) {\n  return Ember.Handlebars.compile(template);\n};\nvar original_lookup = Ember.lookup, lookup;\nModel = Ember.Object.extend();\n\nmodule('label-field helpers', {\n  setup: function() {\n    container = new Ember.Container();\n    container.optionsForType('template', { instantiate: false });\n    container.resolver = function(fullName) {\n      var name = fullName.split(':')[1];\n      return Ember.TEMPLATES[name];\n    };\n    model = Model.create({\n      firstName: 'Brian',\n    });\n    controller = Ember.ObjectController.create();\n    controller.set('content', model);\n  },\n  teardown: function() {\n    Ember.run(function() {\n      view.destroy();\n      view = null;\n    });\n    Ember.lookup = original_lookup;\n  }\n});\n\nvar append = function(view) {\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n};\n\ntest('renders a label field', function() {\n  view = Ember.View.create({\n    template: templateFor('{{label-field firstName}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('label').text(), 'First name');\n});\n\ntest('renders a label field with custom text', function() {\n  view = Ember.View.create({\n    template: templateFor('{{label-field firstName text=\"Your first name\"}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  equal(view.$().find('label').text(), 'Your first name');\n});\n\ntest('uses the wrapper config', function() {\n  Ember.EasyForm.Config.registerWrapper('my_wrapper', {labelClass: 'my-label'});\n  view = Ember.View.create({\n    template: templateFor('{{#form-for controller wrapper=\"my_wrapper\"}}{{label-field firstName}}{{/form-for}}'),\n    container: container,\n    controller: controller\n  });\n  append(view);\n  ok(view.$().find('label.my-label').get(0), 'labelClass not defined');\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/helpers/label-field_test");minispade.register('ember-easyForm/~tests/helpers/submit_test', "(function() {var model, view, container, controller, valid;\nvar templateFor = function(template) {\n  return Ember.Handlebars.compile(template);\n};\nvar original_lookup = Ember.lookup, lookup;\n\nmodule('submit helpers', {\n  setup: function() {\n    container = new Ember.Container();\n    container.optionsForType('template', { instantiate: false });\n    container.resolver = function(fullName) {\n      var name = fullName.split(':')[1];\n      return Ember.TEMPLATES[name];\n    };\n    model = Ember.Object.create({\n      firstName: 'Brian',\n      lastName: 'Cardarella',\n      validate: function() {\n        return valid;\n      },\n    });\n    var Controller = Ember.Controller.extend({\n      actions: {\n        submit: function() {\n          this.incrementProperty('count');\n        }\n      }\n    });\n    controller = Controller.create();\n    controller.set('count', 0);\n  },\n  teardown: function() {\n    Ember.run(function() {\n      view.destroy();\n      view = null;\n    });\n    Ember.lookup = original_lookup;\n  }\n});\n\nvar append = function(view) {\n  Ember.run(function() {\n    view.appendTo('#qunit-fixture');\n  });\n};\n\ntest('renders submit button', function() {\n  view = Ember.View.create({\n    template: templateFor('{{submit}}'),\n    container: container,\n    context: model\n  });\n  append(view);\n  equal(view.$().find('input').prop('value'), 'Submit');\n  equal(view.$().find('input').prop('type'), 'submit');\n});\n\ntest('renders as button', function() {\n  view = Ember.View.create({\n    template: templateFor('{{submit as=\"button\"}}'),\n    container: container,\n    context: model\n  });\n  append(view);\n  equal(view.$().find('button').text(), 'Submit');\n  equal(view.$().find('button').prop('type'), 'submit');\n});\n\ntest('has custom value as button', function() {\n  view = Ember.View.create({\n    template: templateFor('{{submit \"Create\" as=\"button\"}}'),\n    container: container,\n    context: model\n  });\n  append(view);\n  equal(view.$().find('button').text(), 'Create');\n});\n\ntest('submit as button disabled state is bound to models valid state', function() {\n  Ember.run(function() {\n    model.set('isValid', false);\n    model.reopen({isInvalid: Ember.computed.not('isValid')});\n  });\n  view = Ember.View.create({\n    template: templateFor('{{submit as=\"button\"}}'),\n    container: container,\n    context: model\n  });\n  append(view);\n  equal(view.$().find('button').prop('disabled'), true);\n  Ember.run(function() {\n    model.set('isValid', true);\n  });\n  equal(view.$().find('button').prop('disabled'), false);\n});\n\ntest('custom value', function() {\n  view = Ember.View.create({\n    template: templateFor('{{submit \"Create\"}}'),\n    container: container,\n    context: model\n  });\n  append(view);\n  equal(view.$().find('input').prop('value'), 'Create');\n});\n\ntest('submit button disabled state is bound to models valid state', function() {\n  Ember.run(function() {\n    model.set('isValid', false);\n    model.reopen({isInvalid: Ember.computed.not('isValid')});\n  });\n  view = Ember.View.create({\n    template: templateFor('{{submit}}'),\n    container: container,\n    context: model\n  });\n  append(view);\n  equal(view.$().find('input').prop('disabled'), true);\n  Ember.run(function() {\n    model.set('isValid', true);\n  });\n  equal(view.$().find('input').prop('disabled'), false);\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/helpers/submit_test");minispade.register('ember-easyForm/~tests/utilities_test', "(function() {module('EasyForm utility methods', {\n\n});\n\ntest('humanizes string', function() {\n  equal(Ember.EasyForm.humanize(\"firstName\"), 'First name');\n});\n\n})();\n//@ sourceURL=ember-easyForm/~tests/utilities_test");